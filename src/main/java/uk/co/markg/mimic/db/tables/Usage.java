/*
 * This file is generated by jOOQ.
 */
package uk.co.markg.mimic.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import uk.co.markg.mimic.db.DefaultSchema;
import uk.co.markg.mimic.db.Keys;
import uk.co.markg.mimic.db.tables.records.UsageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usage extends TableImpl<UsageRecord> {

    private static final long serialVersionUID = -546246413;

    /**
     * The reference instance of <code>usage</code>
     */
    public static final Usage USAGE = new Usage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsageRecord> getRecordType() {
        return UsageRecord.class;
    }

    /**
     * The column <code>usage.id</code>.
     */
    public final TableField<UsageRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('usage_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>usage.command</code>.
     */
    public final TableField<UsageRecord, String> COMMAND = createField(DSL.name("command"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>usage.serverid</code>.
     */
    public final TableField<UsageRecord, Long> SERVERID = createField(DSL.name("serverid"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>usage.usagetime</code>.
     */
    public final TableField<UsageRecord, LocalDateTime> USAGETIME = createField(DSL.name("usagetime"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>usage</code> table reference
     */
    public Usage() {
        this(DSL.name("usage"), null);
    }

    /**
     * Create an aliased <code>usage</code> table reference
     */
    public Usage(String alias) {
        this(DSL.name(alias), USAGE);
    }

    /**
     * Create an aliased <code>usage</code> table reference
     */
    public Usage(Name alias) {
        this(alias, USAGE);
    }

    private Usage(Name alias, Table<UsageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usage(Name alias, Table<UsageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Usage(Table<O> child, ForeignKey<O, UsageRecord> key) {
        super(child, key, USAGE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<UsageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USAGE;
    }

    @Override
    public UniqueKey<UsageRecord> getPrimaryKey() {
        return Keys.USAGE_PKEY;
    }

    @Override
    public List<UniqueKey<UsageRecord>> getKeys() {
        return Arrays.<UniqueKey<UsageRecord>>asList(Keys.USAGE_PKEY);
    }

    @Override
    public Usage as(String alias) {
        return new Usage(DSL.name(alias), this);
    }

    @Override
    public Usage as(Name alias) {
        return new Usage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usage rename(String name) {
        return new Usage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usage rename(Name name) {
        return new Usage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Long, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
